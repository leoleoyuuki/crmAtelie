/**
 * @fileoverview Firestore Security Rules for Atelier App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model where users can only manage data related to their own accounts.
 * All write operations are secured by checking the authenticated user's ID against the document's `userId` field, ensuring that only the owner can create, update, or delete data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each user can only access their own profile.
 * - /customers/{customerId}: Stores customer information. Each customer document is owned by a specific user (`userId` field).
 * - /orders/{orderId}: Stores order information. Each order document is owned by a specific user (`userId` field).
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - The rules validate that the 'userId' field on both 'customers' and 'orders' matches the authenticated user's ID to enforce ownership.
 *
 * Denormalization for Authorization:
 * - Both the `/customers/{customerId}` and `/orders/{orderId}` documents include a `userId` field that is used to associate the data with a specific user. This denormalization avoids the need for complex queries or additional reads to determine ownership, making the security rules more efficient and straightforward.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their profile.
     * @allow (get) - User with matching {userId} can read their profile.
     * @allow (update) - User with matching {userId} can update their profile.
     * @allow (delete) - User with matching {userId} can delete their profile.
     * @deny (create) - User tries to create a profile with a different {userId}.
     * @deny (get) - User tries to read another user's profile.
     * @deny (update) - User tries to update another user's profile.
     * @deny (delete) - User tries to delete another user's profile.
     * @principle Enforces user ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for customers.
     * @path /customers/{customerId}
     * @allow (create) - User can create a customer if the customer.userId matches the authenticated user ID.
     * @allow (get) - User can read a customer if the customer.userId matches the authenticated user ID.
     * @allow (update) - User can update a customer if the customer.userId matches the authenticated user ID.
     * @allow (delete) - User can delete a customer if the customer.userId matches the authenticated user ID.
     * @deny (create) - User tries to create a customer with a different userId.
     * @deny (get) - User tries to read a customer not associated with their userId.
     * @deny (update) - User tries to update a customer not associated with their userId.
     * @deny (delete) - User tries to delete a customer not associated with their userId.
     * @principle Enforces user ownership based on the userId field within the customer document.
     */
    match /customers/{customerId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Defines rules for orders.
     * @path /orders/{orderId}
     * @allow (create) - User can create an order if the order.userId matches the authenticated user ID.
     * @allow (get) - User can read an order if the order.userId matches the authenticated user ID.
     * @allow (update) - User can update an order if the order.userId matches the authenticated user ID.
     * @allow (delete) - User can delete an order if the order.userId matches the authenticated user ID.
     * @deny (create) - User tries to create an order with a different userId.
     * @deny (get) - User tries to read an order not associated with their userId.
     * @deny (update) - User tries to update an order not associated with their userId.
     * @deny (delete) - User tries to delete an order not associated with their userId.
     * @principle Enforces user ownership based on the userId field within the order document.
     */
    match /orders/{orderId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}