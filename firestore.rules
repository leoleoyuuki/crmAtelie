
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ======= UTILITY FUNCTIONS =======

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.uid == '3YuL6Ff7G9cHAV7xa81kyQF4bCw2';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAccountActive() {
      // Check the user's profile document to see if their status is 'active'.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'active';
    }
    
    function isCreatingOwnResource() {
        return isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    function isResourceOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    function isNotChangingOwner() {
        return request.resource.data.userId == resource.data.userId;
    }

    // ======= COLLECTION RULES =======

    match /users/{userId} {
      // Any signed-in user can get a profile (e.g., to see a name/photo).
      // Write access is restricted.
      allow get: if isSignedIn();
      
      // A user can create their own profile.
      // The email in the new document must match the email from their auth token.
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      
      // A user can update their own profile. The activation function also updates it.
      allow update: if isOwner(userId);
      
      // Profiles are not listable or deletable by clients for security.
      allow list, delete: if false; 
    }
    
    match /accessTokens/{tokenId} {
      // Any authenticated user can attempt to read a token to activate their account.
      allow get: if isSignedIn(); 
      // An authenticated user can update a token (to mark it as used).
      allow update: if isSignedIn(); 
      // Only the designated admin can create new activation tokens.
      allow create: if isAdmin();
      // Tokens are not listable or deletable by clients.
      allow list, delete: if false;
    }

    match /customers/{customerId} {
      // Only active users who own the resource can read or write.
      allow get, update, delete: if isAccountActive() && isResourceOwner();
      // Only active users can list their own customers.
      allow list: if isAccountActive() && request.query.resource.data.userId == request.auth.uid;
      // Only active users can create a customer for themselves.
      allow create: if isAccountActive() && isCreatingOwnResource();
    }

    match /orders/{orderId} {
      // Only active users who own the resource can read or write.
      allow get, update, delete: if isAccountActive() && isResourceOwner();
      // Only active users can list their own orders.
      allow list: if isAccountActive() && request.query.resource.data.userId == request.auth.uid;
      // Only active users can create an order for themselves.
      allow create: if isAccountActive() && isCreatingOwnResource();
    }

    match /priceTable/{itemId} {
      // Only active users who own the resource can read or write.
      allow get, update, delete: if isAccountActive() && isResourceOwner();
      // Only active users can list their own price table items.
      allow list: if isAccountActive() && request.query.resource.data.userId == request.auth.uid;
      // Only active users can create a price table item for themselves.
      allow create: if isAccountActive() && isCreatingOwnResource();
    }
  }
}
