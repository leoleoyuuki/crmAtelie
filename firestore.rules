
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ======= UTILITY FUNCTIONS =======

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth.uid == '3YuL6Ff7G9cHAV7xa81kyQF4bCw2';
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAccountActive() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'active';
    }
    
    // A user is creating their own document if the `userId` field in the new data matches their auth uid.
    function isCreatingOwnResource(userId) {
        return isOwner(userId) && request.resource.data.userId == request.auth.uid;
    }

    // A user is updating their own resource if the `userId` in the existing data matches their auth uid.
    function isResourceOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // On update, the userId field cannot be changed
    function isWritingOwnResource() {
        return request.resource.data.userId == resource.data.userId;
    }

    // ======= COLLECTION RULES =======

    match /users/{userId} {
      allow get: if isSignedIn();
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId); // An active user can update their own profile (e.g. name, photo), and the activation function can update status.
      allow list, delete: if false; // Profiles are not listable or deletable by clients.
    }
    
    match /accessTokens/{tokenId} {
      // Any authenticated user can attempt to read a token to activate their account.
      allow get: if isSignedIn(); 
      // Only an authenticated user can update a token (to mark it as used). The logic in the cloud function prevents misuse.
      allow update: if isSignedIn(); 
      // Only the designated admin can create new activation tokens.
      allow create: if isAdmin();
      allow list, delete: if false; // Tokens are not listable or deletable by clients.
    }

    match /customers/{customerId} {
      allow read, write: if isAccountActive() && isResourceOwner();
      allow create: if isAccountActive() && isCreatingOwnResource(request.auth.uid);
      allow list: if isAccountActive();
    }

    match /orders/{orderId} {
      allow read, write: if isAccountActive() && isResourceOwner();
      allow create: if isAccountActive() && isCreatingOwnResource(request.auth.uid);
      allow list: if isAccountActive();
    }

    match /priceTable/{itemId} {
      allow read, write: if isAccountActive() && isResourceOwner();
      allow create: if isAccountActive() && isCreatingOwnResource(request.auth.uid);
      allow list: if isAccountActive();
    }
  }
}
