/**
 * @fileoverview Firestore Security Rules for the atelier app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Most data is scoped to a specific user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Only the authenticated user can read/write their own profile.
 * - /customers/{customerId}: Stores customer information.  Only the user who created the customer can read/write it.
 * - /orders/{orderId}: Stores order information. Only the user who created the order can read/write it.
 * - /priceTable/{itemId}: Stores price table items. Only the user who created the item can read/write it.
 *
 * Key Security Decisions:
 * - Listing of any collections restricted to the owner.
 *
 * Denormalization for Authorization:
 * - Documents in the `/customers`, `/orders`, and `/priceTable` collections contain a `userId` field, which is used to enforce ownership. This avoids the need for complex `get()` operations in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description User Profile Rules.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own profile with matching userId.
     * @allow (get) User 'user123' can read their own profile.
     * @allow (update) User 'user123' can update their own profile.
     * @allow (delete) User 'user123' can delete their own profile.
     * @deny (create) User 'user456' cannot create a profile with userId 'user123'.
     * @deny (get) User 'user456' cannot read user 'user123' profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User profiles are not listable.
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Customer Rules.
     * @path /customers/{customerId}
     * @allow (create) User 'user123' can create a customer with userId 'user123'.
     * @allow (get) User 'user123' can read a customer with userId 'user123'.
     * @allow (update) User 'user123' can update a customer with userId 'user123'.
     * @allow (delete) User 'user123' can delete a customer with userId 'user123'.
     * @deny (create) User 'user456' cannot create a customer with userId 'user123'.
     * @deny (get) User 'user456' cannot read customer created by 'user123'.
     * @principle Enforces document ownership for all operations on customers.
     */
    match /customers/{customerId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Order Rules.
     * @path /orders/{orderId}
     * @allow (create) User 'user123' can create an order with userId 'user123'.
     * @allow (get) User 'user123' can read an order with userId 'user123'.
     * @allow (update) User 'user123' can update an order with userId 'user123'.
     * @allow (delete) User 'user123' can delete an order with userId 'user123'.
     * @deny (create) User 'user456' cannot create an order with userId 'user123'.
     * @deny (get) User 'user456' cannot read order created by 'user123'.
     * @principle Enforces document ownership for all operations on orders.
     */
    match /orders/{orderId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Price Table Item Rules.
     * @path /priceTable/{itemId}
     * @allow (create) User 'user123' can create a price table item with userId 'user123'.
     * @allow (get) User 'user123' can read a price table item with userId 'user123'.
     * @allow (update) User 'user123' can update a price table item with userId 'user123'.
     * @allow (delete) User 'user123' can delete a price table item with userId 'user123'.
     * @deny (create) User 'user456' cannot create a price table item with userId 'user123'.
     * @deny (get) User 'user456' cannot read price table item created by 'user123'.
     * @principle Enforces document ownership for all operations on price table items.
     */
    match /priceTable/{itemId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}